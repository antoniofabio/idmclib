\input texinfo  @c -*-texinfo-*-
@c %**start of header
@afourpaper
@setfilename manual.info
@settitle Manual
@c %**end of header

@copying
This is the programmers manual of the idmclib C library

Copyright @copyright{} 2007 Marji Lines, Alfredo Medio
@end copying

@titlepage
@title idmclib programmers manual

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top idmclib API

@insertcopying
@end ifnottex

@chapter Modules

The library is ideally divided in modules:
@table @samp
@item idmc_model
basic model allocation/methods
@item idmc_traj
trajectories (for discrete and continuous models) allocation/methods
@item idmc_lexp
Lyapunov spectrum for a given model (discrete and continuous)
@item idmc_cycles
basic period-k cycles finding support functions. Also a separate routine for eigenvalues modulus of real nonsimmetric matrices is provided
@item idmc_raster
mostly here for internal use. Data structures and methods for (integer) raster image manipulation. Used in the idmc_basin module
@item idmc_basin
fast algorithm for identifying basins of attraction of 2-dimensional maps
@item idmc_basin_slow
slow (but sometimes better) basins of attraction algorithm
@end table

@section Model
The model module is probably the most important module, as it contains all the base functions for model allocation and manipulation.

@example
int idmc_model_alloc(const char* buffer, const int buffer_len,
	idmc_model **s)
@end example

Allocates a new idmc model object, and eventually stores it in s. Can return the following error codes (@pxref{common-return-values,,common return values}):
@itemize @bullet
@item IDMC_OK
@item IDMC_EMEM
@item IDMC_ELUASYNTAX
@item IDMC_EMODEL
@end itemize

Only if the result is @code{IDMC_OK} in @code{s} is stored a pointer to a valid @code{idmc_model} object.
Whatever the result of @code{idmc_model_alloc}, you should free the memory after using the model object
by calling @code{idmc_model_free} (see below).

When syntax error occurs, a message with line reference is stored in the @code{s->errorMessage} slot.

@example
void idmc_model_free(idmc_model *s)
@end example

De-allocates a previously allocated model object. It is always safe to call @code{idmc_model_free}: @code{s} can be either
a @code{NULL} pointer, or a pointer to a partially initialized (because of errors) @code{idmc_model} object.

@example
idmc_model* idmc_model_clone(idmc_model *s)
@end example

Clones a model object. Returns a @code{NULL} pointer when memory issues.

@example
int idmc_model_setGslRngSeed(idmc_model *model, int seed)
@end example

Set RNG seed. Always returns @code{IDMC_OK}.

@example
int idmc_model_f(idmc_model *model, const double par[],
	const double var[], double f[])
int idmc_model_g(idmc_model *model, const double par[], 
	const double var[], double f[])
int idmc_model_Jf(idmc_model *model, const double par[],
	const double var[], double Jf[])
int idmc_model_Jg(idmc_model *model, const double par[],
	const double var[], double Jf[])
int idmc_model_NumJf(idmc_model *model, const double par[],
	const double var[], double Jf[],
	double util[], double util2[], double util3[])
@end example

Evaluate some model functions. These can return a runtime error, with relative message string stored in @code{model->errorMessage} buffer.

Accepted arguments:
@table @samp
@item model
@code{idmc_model} object
@item par, var
model parameters and variables values
@item f, Jf
result will be stored here
@item util, util2, util3
workspace pointers to a memory bloc of size: @code{model->nvar * sizeof(double)}
@end table

Return values: a common constant (@pxref{common-return-values,,common return values}).

@section Trajectory

Functions for trajectories computation.

A discrete trajectory object is described by the following struct:

@example
typedef struct 
        idmc_model *model;
        double *par;  /*parameters vector*/
        double *var; /*current value*/
        int step; /*current step number*/
 idmc_traj_trajectory
@end example

@example
int idmc_traj_trajectory_alloc(idmc_model *model, double *parValues,
	double *varValues, idmc_traj_trajectory **ans)
@end example

Allocate a new trajectory, with specified parameters and variables values. Result returned in @code{ans}.

@example
void idmc_traj_trajectory_free(idmc_traj_trajectory *traj)
@end example

De-allocates a trajectory object.

@example
int idmc_traj_trajectory_step(idmc_traj_trajectory *traj)
@end example

Iterates one step on the trajectory object.

A continuous trajectory is described by the structure:

@example
typedef struct 
        idmc_model *model;
        double *par;  /*parameters vector*/
        double *var; /*current value*/
        double *error;
        double step_size;
        gsl_odeiv_step_type *step_function_code;
        
        gsl_odeiv_step *step_function; /*used internally*/
        gsl_odeiv_system system; /*used internally*/
 idmc_traj_ctrajectory;
@end example

which has the following methods:

@example
int idmc_traj_ctrajectory_alloc(idmc_model *model, 
  double *parValues, double *varValues, 
  double step_size, gsl_odeiv_step_type *step_function_code,
  idmc_traj_ctrajectory **ans);
void idmc_traj_ctrajectory_free(idmc_traj_ctrajectory *trajectory);
int idmc_traj_ctrajectory_step(idmc_traj_ctrajectory *trajectory);
@end example
which are completely analogous to their discrete counterparts.

@c FIXME: fill better informations about 'step_function_code'

@section Basins of attraction
@example
int idmc_basin_alloc(idmc_model *m, double *parameters,
        double xmin, double xmax, int xres,
        double ymin, double ymax, int yres, 
        int attractorLimit, int attractorIterations,
        idmc_basin** out_basin)
@end example
Allocate new 'idmc_basin' object

@table @samp
@item m
	model object (object is cloned)
@item parameters
	model parameters (vector will be copied)
@item xmin, xmax, xres
x axis range and resolution
@item ymin, ymax, yres
y axis range and resolution
@item attractorLimit
limit number of iterations before encountering an attractor
@item attractorIterations
limit number of iterations for drawing an attractor
@item out_basin
result object 
@end table

Returns an integer code as defined in @code{defines.h} (@pxref{common-return-values,,common return values}).

@example
void idmc_basin_free(idmc_basin* p)
@end example

Deallocates an idmc_basin object.

@example
int idmc_basin_step(idmc_basin* p)
@end example

Do one algorithm step.

@example
int idmc_basin_finished(idmc_basin* p)
@end example

Check if algorithm has finished.

@section Periodic cycles

Functions for finding periodic cycles for a given dynamical system.

@example
int idmc_cycles_find(idmc_model* model, 
  double *parameters, double *start_point, 
  int power, double epsilon, 
  int max_iterations, 
  double* result, double *eigvals)
@end example

Try to find a cycle of period power for model model with parameters parameters. You have to feed a starting point start_point for the Newton-type algorithm used, the error tolerance epsilon and the max number of iterations max_iterations. An arbitrary point of the cycle is stored in result. In eigvals are stored modulus of eigenvalues associated with the cycle found (if any).

@example
int idmc_cycles_powf(idmc_model *model, int pow,
	double* par, double* var, double* ans)
@end example

Computes the pow iterate of model model with parameters par and values var.

@example
int idmc_cycles_powNumJac(idmc_model *model, int pow, double* par,
	double* var, double* Jf, double *util)
@end example

Numerically computes the jacobian of the powth iterate of model model with parameters par in point var. The result matrix is stored in Jf. util must point to a workspace memory of size 3 * (model->var_len).

@example
int idmc_cycles_eigval(double *mat, int dim, double *ans)
@end example

This is an utility function which computes (in ans) modulus of the eigenvalues of the dim by dim real matrix mat.

@section Lyapunov exponents

Functions for numerical computation of Lyapunov exponents for discrete and continuous dynamical systems.

@example
int idmc_lexp(idmc_model* model, const double *par,
  double *startPoint, double *result, int iterations)
@end example

Compute Lyapunov exponents for discrete-time model @code{model} with parameters @code{par} in point @code{startPoint}.
Stores result in @code{result}. You must provide the number of map iterations.

@example
int idmc_lexp_ode(idmc_model* model, double *parameters,
	double *startPoint, double *result, double time, double step)
@end example

Compute Lyapunov exponents for continuous-time model @code{model} with parameters @code{parameters}
in point @code{startPoint}. Stores result in @code{result}. You must provide the time span @code{time}
and the integration step @code{step}.

@section Version info

There are 3 basic functions for version info retrievial:

@example
int idmc_version_major()
int idmc_version_minor()
int idmc_version_micro()
@end example

Their meaning should be evident.

@chapter Constants

The @code{defines.h} header defines the following constants.

@table @samp
@item IDMC_EPS_VALUE
precision value for numerical derivative approximation
@end table

@anchor{common-return-values}
The following are generic return codes for (almost) all library functions.
@table @samp
@item IDMC_OK
normal operation

@item IDMC_EMEM
memory allocation error

@item IDMC_ELUASYNTAX
syntax error from lua itself

@item IDMC_ERUN
lua runtime error

@item IDMC_EMODEL
malformed model

@item IDMC_EERROR
inconsistent state (disaster)

@item IDMC_EMATH
algorithm failed

@item IDMC_EINT
interrupted by request
@end table

@bye
