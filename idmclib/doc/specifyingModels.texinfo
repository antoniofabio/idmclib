@cindex Writing models

@chapter Writing models

iDMC models are written in the Lua language, with some additions provided by the idmclib library.

@section Basic model structure
The basic structure for the model file can be seen from the logistic model below:
@example
name = "Logistic"
description = "See Model refs in user's guide"
type = "D"
parameters = @{"mu"@}
variables = @{"x"@}

function f(mu, x)
	y = mu*x*(1 - x)
	return y
end

function Jf(mu, x)
	return mu - 2 * mu * x
end
@end example

For continuous time systems change @code{type} to @code{"C"}.
Typical mistakes are forgetting to put the parameters and variables
always in the same order when defining functions and not making proper
use of quotation marks.

@section Syntax
The Lua language (Copyright, 2003 Tecgraf, PUC-Rio) is ``a powerful, light-weight
programming language designed for extending applications''. This description
and the following excerpts are from the @cite{Lua 5.0 Reference Manual},
Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar Celes, Tecgraf Computer Science Department PUC-Rio, 2003 (downloadable from www.lua.org).
That document describes version 5.0 of the Lua programming language and the
Application Program Interface that allows interaction between Lua
programs and their host C programs. For our purposes only the following
characteristics of the language are central.

Page 3. Numerical constants may be written with an optional decimal part
and an optional decimal exponent. Examples of valid numerical constants are
@example
3 3.0 3.1416 314.16e-2 0.31416E1
@end example

Pages 8-10. Lua supports the usual arithmetic operators:
the binary @code{+} (addition),
@code{-} (subtraction), @code{*} (multiplication), @code{/} (division),
@code{^} (exponentiation), and unary (negation).

The relational operators in Lua are
@example
== ~= < > <= >=
@end example

These operators always result in @code{false} or @code{true}.
Equality (@code{==}) first compares the type of its operands.
If the types are different, then the result is @code{false}.
Otherwise, the values of the operands are compared. Numbers
and strings are compared in the usual way. The operator @code{~=}
is exactly the negation of equality (@code{==}). The order
of operators work as follows. If both arguments are numbers,
then they are compared as such. Otherwise, if both arguments are strings,
then their values are compared according to the current locale.

The logical operators in Lua are
@example
and or not
@end example

All logical operators consider both @code{false} and @code{nil} as false and anything
else as true. The operator @code{not} always return @code{false} or @code{true}.
The conjuction operator @code{and} returns its first argument if this value is
@code{false} or @code{nil}; otherwise, @code{and} returns its second argument.
The disjunction operator @code{or} returns its first argument if this value
is different from @code{nil} and @code{false}; otherwise, @code{or} returns
its second argument. Both @code{and} and @code{or} use short cut evaluation, that is, the second operand is evaluated only if necessary.

Operator precedence in Lua follows, from lower to higher priority:
@example
or
and
< > <= >= ~= ==
+ -
* /
not - (unary)
^
@end example

You can use parentheses to change the precedences in an expression. The exponentiation
operator is right associative. All other binary operators are left associative.

@section Mathematical functions
From page 50 of the @cite{Lua 5.0 Reference Manual}. The library is an
interface to most of the functions of the standard C math library. (Some have
slightly different names.) It provides all its functions inside the table
@code{math}. In addition, it registers the @code{global_pow} for the binary
exponentiation operator @code{^} so that @code{x^y} returns @math{x^y}.
The library provides the following functions:
@example
math.abs math.acos math.asin math.atan math.atan2
math.ceil math.cos math.deg math.exp math.floor
math.log math.log10 math.max math.min math.mod
math.pow math.rad math.sin math.sqrt math.tan
math.frexp math.ldexp math.random math.randomseed
math.pi
@end example

Most of them are only interfaces to the corresponding functions in the
C library. All trigonometric functions work in radians (previous versions
of Lua used degrees). The functions @code{math.deg} and @code{math.rad}
convert between radians and degrees. The function @code{math.max} returns
the maximum value of its numeric arguments. Similarly, @code{math.min}
computes the minimum. Both can be used with 1, 2, or more arguments. The functions
@code{math.random} and @code{math.randomseed} are interfaces to the simple
random generator functions @code{rand} and @code{srand} that are provided by ANSI C.
(No guarantees can be given for their statistical properties.) When called
without arguments, @code{math.random} returns a pseudo-random real number
in the range @math{[0,1)}. When called with a number @code{n}, @code{math.random}
returns a pseudorandom integer in the range @math{[1, n]}. When called
with two arguments, @code{l} and @code{u}, @code{math.random} returns a pseudo-random
integer in the range @math{[l, u]}. The @code{math.randomseed} function
sets a seed for the pseudo-random generator:
Equal seeds produce equal sequences of numbers.

@section Random number generation
To the LUA interpreter embedded in the idmclib, some functions for random number generation where added.
The function @code{setSeed}:
@example
setSeed(...)
@end example
accepts a positive integer as argument, and can be used (not necessary) to initialize the internal random number generator.
The following table summarize the new available LUA functions, their accepted arguments and the corresponding distribution.

@multitable {rexponential} {arguments} {Lognormal with parameters 'zeta','sigma'}
@headitem function @tab arguments @tab distribution
@item runif @tab none @tab Unif(0,1)
@item rber @tab p @tab Bernoulli of parameter 'p'
@item rbinom @tab p,n @tab Binomial of parameters 'p' and 'n'
@item rgeom @tab p @tab Geometric of parameter 'p'
@item rnorm @tab none @tab Standard gaussian
@item rpois @tab mu @tab Poisson with mean 'mu'
@item rlaplace @tab a @tab Laplace of width 'a'
@item rexponential @tab mu @tab Exponential with mean 'mu'
@item rbeta @tab a,b @tab Beta with parameters 'a','b'
@item rlognormal @tab zeta,sigma @tab Lognormal with parameters 'zeta','sigma'
@item rlogistic @tab a @tab Logistic with parameter 'a'
@item rpareto @tab a,b @tab Pareto of order 'a', with x>='b'
@end multitable

Those functions calls, behind the scenes, the corresponding functions of the Gnu Scientific Library (GSL) for the random number generation.
For details on the parametrization/density formula of those distributions, please refer to the GSL documentation.

Usage examples:
@table @code
@item rnorm()*3-1
gives a realization of a normal with mean=-1 and s.d.=3
@item (b-a)*runif()+ a
gives a realization of a uniform distribution between 'a' and 'b'
@item rpois(10)
gives a realization of a Poisson with mean=10
@end table

@subsection The RNG algorithm
For the actual pseudo-random numbers generation, the MT19937 algorithm is used.
The following is quoted from the official GSL documentation:
@quotation
The MT19937 generator of Makoto Matsumoto and Takuji Nishimura is a variant
of the twisted generalized feedback shift-register algorithm, and is known as the
`Mersenne Twister' generator. It has a Mersenne prime period of 219937 - 1 (about
106000) and is equi-distributed in 623 dimensions. It has passed the diehard statistical
tests. It uses 624 words of state per generator and is comparable in speed to the
other generators. The original generator used a default seed of 4357 and choosing s
equal to zero in @code{gsl_rng_set} reproduces this.
For more information see,
@quotation
	Makoto Matsumoto and Takuji Nishimura, `Mersenne Twister: A 623-dimensionally
  equidistributed uniform pseudorandom number generator'. ACM
	Transactions on Modeling and Computer Simulation, Vol. 8, No. 1 (Jan. 1998),
	Pages 3-30
@end quotation
The generator @code{gsl_rng_mt19937} uses the second revision of the seeding procedure
published by the two authors above in 2002. The original seeding procedures could
cause spurious artifacts for some seed values. They are still available through the
alternative generators @code{gsl_rng_mt19937_1999} and @code{gsl_rng_mt19937_1998}.
@end quotation
