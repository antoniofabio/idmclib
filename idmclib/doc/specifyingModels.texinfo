@cindex Writing models

@chapter Writing models

Models are written in the LUA language, with some additions provided by the idmclib library.

@section Basic model structure
The basic structure for the model file can be seen from the logistic model below:
@example
name = "Logistic"
description = "See Model refs in user's guide"
type = "D"
parameters = @{"mu"@}
variables = @{"x"@}

function f(mu, x)
	y = mu*x*(1 - x)
	return y
end

function Jf(mu, x)
	return mu - 2 * mu * x
end
@end example

@section Random number generation
To the LUA interpreter embedded in the idmclib, some functions for random number generation where added.
The function @code{setSeed}:
@example
setSeed(...)
@end example
accepts a positive integer as argument, and can be used (not necessary) to initialize the internal random number generator.
The following table summarize the new available LUA functions, their accepted arguments and the corresponding distribution.

@table
function		arguments		distribution
-------------------------------------------------------------------
runif			none			Unif(0,1)
rber			p				Bernoulli of parameter 'p'
rbinom			p,n				Binomial of parameters 'p' and 'n'
rgeom			p				Geometric of parameter 'p'
rnorm			none			Standard gaussian
rpois			mu				Poisson with mean 'mu'
rlaplace		a				Laplace of width 'a'
rexponential	mu				Exponential with mean 'mu'
rbeta			a,b				Beta with parameters 'a','b'
rlognormal		zeta,sigma		Lognormal with parameters 'zeta','sigma'
rlogistic		a				Logistic with parameter 'a'
rpareto			a,b				Pareto of order 'a', with x>='b'
-------------------------------------------------------------------
@end table

Those functions calls, behind the scenes, the corresponding functions of the Gnu Scientific Library (GSL) for the random number generation.
For details on the parametrization/density formula of those distributions, please refer to the GSL documentation.

Usage examples:
@table @code
@item rnorm()*3-1
gives a realization of a normal with mean=-1 and s.d.=3
@item (b-a)*runif()+ a
gives a realization of a uniform distribution between 'a' and 'b'
@item rpois(10)
gives a realization of a Poisson with mean=10
@end table

@subsection The RNG algorithm
For the actual pseudo-random numbers generation, the MT19937 algorithm is used.
The following is quoted from the official GSL documentation:
@quotation
The MT19937 generator of Makoto Matsumoto and Takuji Nishimura is a variant
of the twisted generalized feedback shift-register algorithm, and is known as the
`Mersenne Twister' generator. It has a Mersenne prime period of 219937 - 1 (about
106000) and is equi-distributed in 623 dimensions. It has passed the diehard statistical
tests. It uses 624 words of state per generator and is comparable in speed to the
other generators. The original generator used a default seed of 4357 and choosing s
equal to zero in @code{gsl_rng_set} reproduces this.
For more information see,
@quotation
	Makoto Matsumoto and Takuji Nishimura, `Mersenne Twister: A 623-dimensionally
  equidistributed uniform pseudorandom number generator'. ACM
	Transactions on Modeling and Computer Simulation, Vol. 8, No. 1 (Jan. 1998),
	Pages 3-30
@end quotation
The generator @code{gsl_rng_mt19937} uses the second revision of the seeding procedure
published by the two authors above in 2002. The original seeding procedures could
cause spurious artifacts for some seed values. They are still available through the
alternative generators @code{gsl_rng_mt19937_1999} and @code{gsl_rng_mt19937_1998}.
@end quotation
