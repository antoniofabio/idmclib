Documentation for the idmclib C library
Last modified: 23/05/2008 by Antonio, Fabio Di Narzo

1. Compiling
For compiling idmclib you need a C99 compiler and the CMake (version >=2.4.6) build system.

From the top project directory, type:
# mkdir build
# cd build
# cmake ..
for configuring. If all goes right, type:
# make
to build all. Finally,
# make install
to install.

1.1 Dependencies
GLS-1.9 and LUA-5.1 (or compatibles) are required for compiling/linking the idmclib library.
JDK-6 and SWIG-1.3 (or compatibles) are required for building the Java bindings.

1.2 Configuration
For fine-tuning compiling/linking flags, use CMake facilities.
Under unixes, the 'ccmake' command lets you set all building variables 
(such as paths to external libraries/programs) from an ncurses UI.

2. API
Look at the doc subfolder for documentation, and at the test directory for further usage examples.
The library is ideally divided in modules:
idmc_model	basic model allocation/methods
idmc_traj	trajectories (for discrete and continuous models) allocation/methods
idmc_lexp	Lyapunov spectrum for a given model (discrete and continuous)
idmc_cycles	basic period-k cycles finding support functions. Also a separate routine for eigenvalues modulus of real nonsimmetric matrices is provided
idmc_raster	mostly here for internal use. Data structures and methods for (integer) raster image manipulation. Used in the idmc_basin module
idmc_basin	fast algorithm for identifying basins of attraction of 2-dimensional maps
idmc_basin_slow	slow (but sometimes better) basins of attraction algorithm

3. Python bindings
Low-level python bindings were provided via SWIG, but are no longer mantained.
These are mainly intended for testing/prototyping purposes.
Watch at the pydmcTest.py file for usage examples, and to the various idmc_*.i interface files for the API.
If you wish, you will have to manually build it.

4. Java bindings
Java bindings are provided via SWIG. They're low-level, so maybe you'll need to write your own high-level wrappers for using in your project.
Watch at the SWIG interface files and to generated java files for the API. A full usage example is the companion iDMC software (2.x.x series).

5. R bindings
R bindings are provided via a regular R package, RiDMC, with bounded documentation.
It is distributed separately on the idmclib web site.

APPENDIX A. Step-by-step windows compiling instructions (idmclib + java bindings)
- Install JDK-1.6 (if you don't already have it)
- Download and unpack swig-1.3 (www.swig.org). Add the folder to the system path.
- Install MinGW, C and Fortran compilers
- Install MSYS (with GNU make)
- Install CMake-2.4.6
- Download and compile under MinGW/MSYS the LUA-5.1 and GSL-1.9 packages 
  (maybe you can find ready-compiled libraries from the idmclib home page).
- Copy generated static libraries files (i.e.: liblua.a, liblualib.a, libgsl.a, libgslcblas.a) to the 'c:\mingw\lib' folder
- Unpack idmclib package somewhere. From the MSYS prompt, type:
	# mkdir build
	# cd build
	# cmake ..
	# make
- In case of troubles, try using the cmake GUI from the windows start menu. That will let you fine tuning paths
